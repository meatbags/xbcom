var Collider=function(t){function e(n){if(i[n])return i[n].exports;var s=i[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,e),s.l=!0,s.exports}var i={};return e.m=t,e.c=i,e.d=function(t,i,n){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=2)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n={system:{cacheSize:10},quadrants:{size:{x:50,y:10,z:50}},plane:{dotBuffer:.001,collisionThreshold:.5}};e.default=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=2*Math.PI,s=function(t){return new THREE.Vector3(t.x,t.y,t.z)},o=function(t,e){return new THREE.Vector3(t.x+e.x,t.y+e.y,t.z+e.z)},r=function(t,e){return new THREE.Vector3(t.x-e.x,t.y-e.y,t.z-e.z)},a=function(t){var e=Math.sqrt(t.x*t.x+t.y*t.y+t.z*t.z);return 0==e?t:new THREE.Vector3(t.x/e,t.y/e,t.z/e)},h=function(t){return t.x*=-1,t.y*=-1,t.z*=-1,t},l=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+Math.pow(e.z-t.z,2))},u=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.z-t.z,2))},c=function(t,e){var i=u(t,e),n=e.y-t.y;return Math.atan2(n,i)},f=function(t,e){return new THREE.Vector3(t.x*e,t.y*e,t.z*e)},d=function(t,e){return t.x===e.x&&t.y===e.y&t.z===e.z},m=function(t,e){return new THREE.Vector3(t.y*e.z-t.z*e.y,t.z*e.x-t.x*e.z,t.x*e.y-t.y*e.x)},p=function(t,e){return Math.atan2(Math.sin(e-t),Math.cos(e-t))},y=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z};e.copyVector=s,e.isVectorEqual=d,e.pitchBetween=c,e.twoPi=n,e.distanceBetween=l,e.distanceBetween2D=u,e.minAngleDifference=p,e.dotProduct=y,e.addVector=o,e.subtractVector=r,e.scaleVector=f,e.crossProduct=m,e.reverseVector=h,e.normalise=a},function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Player=e.System=e.Mesh=void 0;var s=i(3),o=n(s),r=i(5),a=n(r),h=i(7),l=n(h);e.Mesh=o.default,e.System=a.default,e.Player=l.default},function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var s=i(0),o=n(s),r=i(4),a=n(r),h=i(1),l=function(t){if(this.isColliderMesh=!0,!t.isBufferGeometry)throw"Error: Input is not THREE.BufferGeometry";this.geometry=t,this.box=(new THREE.Box3).setFromBufferAttribute(t.attributes.position),this.min=this.box.min,this.max=this.box.max,this.planes=[],this.generatePlanes()};l.prototype={generatePlanes:function(){var t=this.geometry.attributes.position.array,e=this.geometry.attributes.normal.array;if(this.geometry.index)for(var i=this.geometry.index.array,n=this.geometry.attributes.position.itemSize,s=0;s<i.length;s+=3){var o=i[s]*n,r=i[s+1]*n,h=i[s+2]*n;this.planes.push(new a.default(new THREE.Vector3(t[o],t[o+1],t[o+2]),new THREE.Vector3(t[r],t[r+1],t[r+2]),new THREE.Vector3(t[h],t[h+1],t[h+2]),new THREE.Vector3(e[o],e[o+1],e[o+2]),new THREE.Vector3(e[r],e[r+1],e[r+2]),new THREE.Vector3(e[h],e[h+1],e[h+2])))}else for(var l=0;l<t.length;l+=9)this.planes.push(new a.default(new THREE.Vector3(t[l+0],t[l+1],t[l+2]),new THREE.Vector3(t[l+3],t[l+4],t[l+5]),new THREE.Vector3(t[l+6],t[l+7],t[l+8]),new THREE.Vector3(e[l+0],e[l+1],e[l+2]),new THREE.Vector3(e[l+3],e[l+4],e[l+5]),new THREE.Vector3(e[l+6],e[l+7],e[l+8])))},collision:function(t){if(this.box.containsPoint(t)){for(var e=0;e<this.planes.length;e+=1)this.planes[e].culled=!1;for(var i=0;i<this.planes.length;i+=1)if(!this.planes[i].culled&&this.planes[i].isPointBelowOrEqual(t))for(var n=0;n<this.planes.length;n+=1)!this.planes[n].culled&&n!=i&&this.planes[i].isPlaneAbove(this.planes[n])&&(this.planes[n].culled=!0);for(var s=0;s<this.planes.length;s+=1)if(!this.planes[s].culled&&!this.planes[s].isPointBelowOrEqual(t))return!1;return!0}return!1},ceiling:function(t){for(var e=null,i=0;i<this.planes.length;i+=1){var n=this.planes[i];if(n.containsPointXZ(t)&&n.isPointBelowOrEqual(t)&&n.normal.y>=0){var s=n.getY(t.x,t.z);s>=t.y&&(null===e||s<e)&&(e=s)}}return e},ceilingPlane:function(t){for(var e=null,i=null,n=0;n<this.planes.length;n+=1){var s=this.planes[n];if(s.containsPointXZ(t)&&s.isPointBelowOrEqual(t)&&s.normal.y>=0){var o=s.getY(t.x,t.z);o>=t.y&&(null==i||o<i)&&(i=o,e=s)}}return{y:i,plane:e}},intersect:function(t,e){for(var i=null,n=0;n<this.planes.length;n+=1){var s=this.planes[n].intersect(t,e);if(null!=s){var o=(0,h.distanceBetween)(t,s);(null==i||o<i.distance)&&(i={intersect:s,plane:this.planes[n],distance:o})}}return i},nearest2DIntersect:function(t,e){for(var i=e,n=null,s=(new THREE.Box3).setFromPoints([t,e]),r=0;r<this.planes.length;r+=1)if(s.intersectsBox(this.planes[r].box)&&this.planes[r].distanceToPlane(e)<=o.default.plane.collisionThreshold){var a=this.planes[r].getNormalIntersectXZ(e),l=(0,h.distanceBetween)(a,e);(null==n||l<n)&&(n=l,i=a)}return i}},e.default=l},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i(1),s=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e}(n),o=i(0),r=function(t){return t&&t.__esModule?t:{default:t}}(o),a=function(t,e,i,n,s,o){this.p1=t,this.p2=e,this.p3=i,this.n1=n,this.n2=s,this.n3=o,this.culled=!1,this.generatePlane()};a.prototype={generatePlane:function(){var t=s.subtractVector(this.p2,this.p1),e=s.subtractVector(this.p3,this.p1);this.normal=s.normalise(s.crossProduct(t,e)),this.normalXZ=new THREE.Vector3(this.normal.x,0,this.normal.z),s.dotProduct(this.normal,this.n1)<0&&(this.normal=s.reverseVector(this.normal)),this.position=new THREE.Vector3((this.p1.x+this.p2.x+this.p3.x)/3,(this.p1.y+this.p2.y+this.p3.y)/3,(this.p1.z+this.p2.z+this.p3.z)/3),this.D=-this.normal.x*this.position.x-this.normal.y*this.position.y-this.normal.z*this.position.z,this.box=(new THREE.Box3).setFromPoints([this.p1,this.p2,this.p3]),this.boxExpanded=(new THREE.Box3).setFromPoints([this.p1,this.p2,this.p3]).expandByScalar(r.default.plane.surfaceCollisionThreshold)},isPointAbove:function(t){var e=s.subtractVector(t,this.position);return s.dotProduct(e,this.normal)>0},isPointBelow:function(t){var e=s.subtractVector(t,this.position);return s.dotProduct(e,this.normal)<0},isPointAboveOrEqual:function(t){var e=s.subtractVector(t,this.position);return s.dotProduct(e,this.normal)>=-r.default.plane.dotBuffer},isPointBelowOrEqual:function(t){var e=s.subtractVector(t,this.position);return s.dotProduct(e,this.normal)<=r.default.plane.dotBuffer},isPointOnSurface:function(t){var e=s.subtractVector(t,this.position),i=s.dotProduct(e,this.normal);return i<=r.default.plane.dotBuffer&&i>=-r.default.plane.dotBuffer},isPlaneAbove:function(t){return this.isPointAboveOrEqual(t.p1)&&this.isPointAboveOrEqual(t.p2)&&this.isPointAboveOrEqual(t.p3)},containsPoint:function(t){return this.box.containsPoint(t)},containsPointXZ:function(t){return this.box.containsPoint(new THREE.Vector3(t.x,this.position.y,t.z))},containsPointThreshold:function(t){return this.boxExpanded.containsPoint(t)},distanceToPlane:function(t){return Math.abs(this.normal.x*t.x+this.normal.y*t.y+this.normal.z*t.z+this.D)},getNormalIntersect:function(t){var e=s.addVector(t,this.normal),i=s.subtractVector(e,t),n=this.normal.x*t.x+this.normal.y*t.y+this.normal.z*t.z+this.D,o=this.normal.x*i.x+this.normal.y*i.y+this.normal.z*i.z,r=t.x-i.x*n/o,a=t.y-i.y*n/o,h=t.z-i.z*n/o;return new THREE.Vector3(r,a,h)},getNormalIntersectXZ:function(t){var e=this.normal.x*t.x+this.normal.y*t.y+this.normal.z*t.z+this.D,i=this.normal.x*this.normal.x+this.normal.z*this.normal.z,n=t.x-this.normal.x*e/i,s=t.z-this.normal.z*e/i;return new THREE.Vector3(n,t.y,s)},intersect:function(t,e){var i=s.subtractVector(e,t),n=s.dotProduct(this.normal,s.normalise(i));if(Math.abs(n)<=r.default.plane.dotBuffer)return null;var o=this.normal.x*t.x+this.normal.y*t.y+this.normal.z*t.z+this.D,a=this.normal.x*i.x+this.normal.y*i.y+this.normal.z*i.z;if(0==a)return null;var h=t.x-i.x*o/a,l=t.y-i.y*o/a,u=t.z-i.z*o/a,c=new THREE.Vector3(h,l,u);if(this.containsPoint(c)){if((new THREE.Box3).setFromPoints([e,t]).expandByScalar(.05).containsPoint(c))return c}return null},getY:function(t,e){return(this.normal.x*t+this.normal.z*e+this.D)/-this.normal.y},getPerpendicularNormals:function(){return{right:new THREE.Vector3(-this.normal.z,0,this.normal.x),left:new THREE.Vector3(this.normal.z,0,-this.normal.x)}}},e.default=a},function(t,e,i){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var s=i(0),o=n(s),r=i(6),a=n(r),h=function(){this.quadrants=new a.default,this.cache={mesh:[],ceiling:[],floor:[],intersect:[]},this.isColliderSystem=!0,this.init()};h.prototype={init:function(){},add:function(){for(var t=0;t<arguments.length;t+=1){var e=arguments[t];if(!e.isColliderMesh)throw"Error: Input must be Collider.Mesh";this.quadrants.add(e)}},collision:function(t){if(this.isCached(t,this.cache.mesh))return!0;for(var e=!1,i=this.quadrants.getQuadrant(t),n=0;n<i.length;n+=1){var s=i[n];if(s.collision(t)){e=!0,this.cacheItem(this.cache.mesh,t,s);break}}return e},collisions:function(t){for(var e=[],i=this.quadrants.getQuadrant(t),n=0;n<i.length;n+=1){var s=i[n];s.collision(t)&&e.push(s)}return e},ceiling:function(t){if(this.isCached(t,this.cache.ceiling))return this.cache.ceiling[0].item;for(var e=this.quadrants.getQuadrant(t),i=null,n=0;n<e.length;n+=1){var s=e[n];if(s.collision(t)){var o=s.ceiling(t);(null===i||o>i)&&(i=o)}}return this.cacheItem(this.cache.ceiling,t,i),i},ceilingPlane:function(t){for(var e=this.quadrants.getQuadrant(t),i=null,n=null,s=0;s<e.length;s+=1){var o=e[s];if(o.collision(t)){var r=o.ceilingPlane(t);(null===i||r.y>i)&&(i=r.y,n=r.plane)}}return{y:i,plane:n}},ceilingPlanes:function(t){for(var e=this.quadrants.getQuadrant(t),i=[],n=0;n<e.length;n+=1){var s=e[n];if(s.collision(t)){var o=s.ceilingPlane(t);null!=o.y&&i.push({y:o.y,plane:o.plane})}}return i},intersect:function(t,e){if(this.isCached(t,this.cache.intersect)){var i=this.cache.intersect[0];if(e.x===i.item.to.x&&e.y===i.item.to.y&&e.z===i.item.to.z)return i.item.intersect}for(var n=this.quadrants.getQuadrant(e),s=null,o=0;o<n.length;o+=1){var r=n[o];if(r.collision(e)){var a=r.intersect(t,e);null!=a&&(null===s||a.distance<s.distance)&&(s=a)}}return this.cacheItem(this.cache.intersect,t,{to:e,intersect:s}),s},intersects:function(t,e){for(var i=this.quadrants.getQuadrant(e),n=[],s=0;s<i.length;s+=1){var o=i[s];if(o.collision(e)){var r=o.intersect(t,e);null!=r&&n.push(r)}}return n},countIntersects:function(t,e){for(var i=this.quadrants.getQuadrant(e),n=0,s=0;s<i.length;s+=1){var o=i[s];if(o.collision(e)){null!=o.intersect(t,e)&&(n+=1)}}return n},countCollisions:function(t){for(var e=0,i=this.quadrants.getQuadrant(t),n=0;n<i.length;n+=1){i[n].collision(t)&&(e+=1)}return e},cacheItem:function(t,e,i){t.unshift({point:new THREE.Vector3(e.x,e.y,e.z),item:i}),t.length>o.default.system.cacheSize&&t.splice(t.length-1,1)},isCached:function(t,e){return e.length>0&&t.x===e[0].point.x&&t.y===e[0].point.y&&t.z===e[0].point.z}},e.default=h},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i(0),s=function(t){return t&&t.__esModule?t:{default:t}}(n),o=function(){this.q=[]};o.prototype={positionToQuadrant:function(t){return{x:Math.floor(t.x/s.default.quadrants.size.x),y:Math.floor(t.y/s.default.quadrants.size.y),z:Math.floor(t.z/s.default.quadrants.size.z)}},add:function(t){for(var e=this.positionToQuadrant(t.min),i=this.positionToQuadrant(t.max),n=e.x;n<=i.x;n+=1)for(var s=e.y;s<=i.y;s+=1)for(var o=e.z;o<=i.z;o+=1)this.addToQuadrant(n,s,o,t)},addToQuadrant:function(t,e,i,n){this.q[t]||(this.q[t]=[]),this.q[t][e]||(this.q[t][e]=[]),this.q[t][e][i]||(this.q[t][e][i]=[]),this.q[t][e][i].push(n)},getQuadrant:function(t){var e=this.positionToQuadrant(t);return this.q[e.x]&&this.q[e.x][e.y]&&this.q[e.x][e.y][e.z]?this.q[e.x][e.y][e.z]:[]}},e.default=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i(1),s=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e}(n),o=function(t){this.domElement=t,this.position=new THREE.Vector3(0,0,0),this.movement=new THREE.Vector3(0,0,0),this.rotation=new THREE.Vector3(0,Math.PI,0),this.offset={rotation:new THREE.Vector3(0,0,0)},this.target={position:new THREE.Vector3(0,0,0),movement:new THREE.Vector3(0,0,0),rotation:new THREE.Vector3(0,Math.PI,0),offset:{rotation:new THREE.Vector3(0,0,0)}},this.attributes={speed:8,speedWhileJumping:4,height:1.8,rotation:.75*Math.PI,fov:58,cameraThreshold:.4,maxRotationOffset:.3*Math.PI,falling:!1,adjust:{slow:.02,normal:.05,fast:.09,veryFast:.2},climb:{up:1,down:.5,minYNormal:.5},gravity:{accel:10,maxVelocity:50,jumpVelocity:5}},this.outputLog=[],this.camera=new THREE.PerspectiveCamera(this.attributes.fov,1,.1,1e4),this.camera.up=new THREE.Vector3(0,1,0),this.init()};o.prototype={init:function(){this.object=new THREE.Mesh(new THREE.SphereBufferGeometry(.05),new THREE.MeshPhongMaterial),this.bindControls(),this.resizeCamera()},resizeCamera:function(){var t=this.domElement.width,e=this.domElement.height;this.camera.aspect=t/e,this.camera.updateProjectionMatrix()},bindControls:function(){var t=this;t.domElement.addEventListener("mousemove",function(e){t.handleMouseMove(e)},!1),t.domElement.addEventListener("mousedown",function(e){t.handleMouseDown(e)},!1),t.keys={up:!1,down:!1,left:!1,right:!1,jump:!1},document.addEventListener("keydown",function(e){t.handleKeyDown(e)},!1),document.addEventListener("keyup",function(e){t.handleKeyUp(e)},!1)},log:function(){for(var t="",e=0;e<arguments.length;e+=1)t+=arguments[e]+" ";this.outputLog.push(t)},update:function(t,e){if(this.outputLog=[],this.keys.up||this.keys.down){var i=(this.keys.up?1:0)+(this.keys.down?-1:0),n=this.rotation.y+this.offset.rotation.y,o=Math.sin(n)*this.attributes.speed*i,r=Math.cos(n)*this.attributes.speed*i;this.target.movement.x=o,this.target.movement.z=r}else this.target.movement.x=0,this.target.movement.z=0;this.keys.jump&&(this.keys.jump=!1,0==this.movement.y&&(this.movement.y=this.attributes.gravity.jumpVelocity)),this.falling=0!=this.movement.y,this.falling?(this.movement.x+=(this.target.movement.x-this.movement.x)*this.attributes.adjust.slow,this.movement.z+=(this.target.movement.z-this.movement.z)*this.attributes.adjust.slow):(this.movement.x=this.target.movement.x,this.movement.z=this.target.movement.z);var a=s.addVector(s.scaleVector(this.movement,t),this.target.position),h=e.collisions(a);if(this.movement.y=Math.max(this.movement.y-this.attributes.gravity.accel*t,-this.attributes.gravity.maxVelocity),h.length>0){this.log("Collisions",h.length);for(var l=0;l<h.length;l+=1){var u=h[l].ceilingPlane(a);null!=u.y&&u.plane.normal.y>=this.attributes.climb.minYNormal&&u.y-this.target.position.y<=this.attributes.climb.up&&(this.movement.y=0,u.y>=a.y&&(a.y=u.y,this.log("CLIMBED")))}h=e.collisions(a);for(var c=[],f=0;f<h.length;f+=1){var d=h[f].ceilingPlane(a);null!=d.y&&(d.plane.normal.y<this.attributes.climb.minYNormal||d.y-this.target.position.y>this.attributes.climb.up)&&c.push(h[f])}if(c.length>0){for(var m=s.copyVector(a),p=0;p<c.length;p+=1){m=c[p].nearest2DIntersect(this.target.position,a)}a.x=m.x,a.z=m.z,this.object.position.set(a.x,a.y,a.z);var y=0;h=e.collisions(a);for(var v=0;v<h.length;v+=1){var g=h[v].ceilingPlane(a);null!=g.y&&(g.plane.normal.y<this.attributes.climb.minYNormal||g.y-this.target.position.y>this.attributes.climb.up)&&(y+=1)}y>1&&(a.x=this.target.position.x,a.z=this.target.position.z)}}else{var x=s.copyVector(a);if(x.y-=this.attributes.climb.down,!this.falling&&e.collision(x)){var E=e.ceilingPlane(x);E.plane.normal.y>=this.attributes.climb.minYNormal&&(a.y=E.y,this.movement.y=0)}}if(this.target.position.x=a.x,this.target.position.y=a.y,this.target.position.z=a.z,this.position.x+=(this.target.position.x-this.position.x)*this.attributes.adjust.veryFast,this.position.y+=(this.target.position.y-this.position.y)*this.attributes.adjust.veryFast,this.position.z+=(this.target.position.z-this.position.z)*this.attributes.adjust.veryFast,this.keys.left||this.keys.right){var b=(this.keys.left?1:0)+(this.keys.right?-1:0);this.target.rotation.y+=this.attributes.rotation*t*b}this.rotation.y+=s.minAngleDifference(this.rotation.y,this.target.rotation.y)*this.attributes.adjust.fast,this.offset.rotation.x+=(this.target.offset.rotation.x-this.offset.rotation.x)*this.attributes.adjust.normal,this.offset.rotation.y+=(this.target.offset.rotation.y-this.offset.rotation.y)*this.attributes.adjust.normal,this.rotation.y+=this.rotation.y<0?s.twoPi:this.rotation.y>s.twoPi?-s.twoPi:0;var w=this.rotation.y+this.offset.rotation.y,z=this.rotation.x+this.offset.rotation.x,P=this.position.y+this.attributes.height;this.camera.position.set(this.position.x,P,this.position.z),this.camera.lookAt(new THREE.Vector3(this.position.x+Math.sin(w),P+Math.sin(z),this.position.z+Math.cos(w)))},handleKeyDown:function(t){switch(t.keyCode){case 38:case 87:this.keys.up=!0;break;case 37:case 65:this.keys.left=!0;break;case 40:case 83:this.keys.down=!0;break;case 39:case 68:this.keys.right=!0;break;case 32:this.keys.jump=!0}},handleKeyUp:function(t){switch(t.keyCode){case 38:case 87:this.keys.up=!1;break;case 37:case 65:this.keys.left=!1;break;case 40:case 83:this.keys.down=!1;break;case 39:case 68:this.keys.right=!1}},handleMouseDown:function(t){var e=this.domElement.getBoundingClientRect(),i=this.domElement.width,n=(t.clientX-e.left)/i,s=this.attributes.cameraThreshold;this.target.rotation.y=n<s?this.rotation.y+(s-n)/s*this.attributes.maxRotationOffset:n>1-s?this.rotation.y+(n-(1-s))/s*-this.attributes.maxRotationOffset:this.rotation.y},handleMouseMove:function(t){var e=this.domElement.getBoundingClientRect(),i=this.domElement.width,n=this.domElement.height,s=(t.clientX-e.left)/i,o=(t.clientY-e.top)/n,r=this.attributes.cameraThreshold;this.target.offset.rotation.y=s<r?(r-s)/r*this.attributes.maxRotationOffset:s>1-r?(s-(1-r))/r*-this.attributes.maxRotationOffset:0,this.target.offset.rotation.x=o<r?(r-o)/r*this.attributes.maxRotationOffset:o>1-r?(o-(1-r))/r*-this.attributes.maxRotationOffset:0}},e.default=o}]);